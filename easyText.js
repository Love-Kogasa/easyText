// Generated by LiveScript 1.6.0
(function(){
  var easyText, easyTextParser, easyTextUtil, out$ = typeof exports != 'undefined' && exports || this;
  out$.easyText = easyText = (function(){
    easyText.displayName = 'easyText';
    var prototype = easyText.prototype, constructor = easyText;
    function easyText(et){
      this.list = [
        [
          ".", "。", function(txt){
            return txt + "<br>";
          }
        ], [
          ";", "；", function(txt){
            return txt + "<br><hr>";
          }
        ], [
          "!", "！", function(txt){
            return "<div style='color: yellow;' onclick='alert(\"" + txt + "\")'>" + txt + "</div>";
          }
        ], [
          "~", "～", function(txt){
            return "<s>" + txt + "</s><br>";
          }
        ], [
          "@", "→", function(txt){
            return "<a href='" + txt + "'>Link - 链接</a>";
          }
        ], [
          "#", "＃", function(txt){
            return "<h3>" + txt + "</h3><hr>";
          }
        ]
      ];
      this.code = et.split("\n");
    }
    easyText.prototype.parse = function(){
      var ret, list;
      ret = "";
      list = this.list;
      this.code.forEach(function(line){
        list.forEach(function(about){
          var func, theLine, method;
          func = about[about.length - 1];
          theLine = line.trim();
          method = about.slice(0, -1);
          ret += (function(it){
            return in$(it, method);
          })(theLine[theLine.length - 1]) ? func(theLine.slice(0, -1)) : "";
          return null;
        });
        return null;
      });
      return ret;
    };
    easyText.prototype.html = function(title){
      title == null && (title = "WebName ～");
      return "<!doctype><html><head><title>" + title + "</title><meta http-equiv='Content-Type' content='charset=utf-8'/><meta name='viewport' content='width=device-width, initial-scale=1, maximum-scale=1'></head><body>" + this.parse() + "</body><html>";
    };
    easyText.prototype.add = function(func){
      var key, res$, i$, to$, newAbout;
      res$ = [];
      for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      key = res$;
      newAbout = key.concat(func);
      this.list = this.list.concat(newAbout);
      return this;
    };
    return easyText;
  }());
  out$.easyTextParser = easyTextParser = (function(){
    easyTextParser.displayName = 'easyTextParser';
    var prototype = easyTextParser.prototype, constructor = easyTextParser;
    function easyTextParser(element){
      this.ele = !deepEq$(typeof element, "object", '===') ? document.querySelector(element) : element;
    }
    easyTextParser.prototype.printTo = function(ele){
      var putTo;
      ele == null && (ele = this.ele);
      putTo = !deepEq$(typeof ele, "object", '===') ? document.querySelector(ele) : ele;
      putTo.innerHTML = new easyText(this.ele.innerHTML).parse();
      return this;
    };
    easyTextParser.prototype.fromURL = function(path, onError){
      var ele;
      if (!path) {
        return "path?";
      }
      ele = this.ele;
      fetch(path).then(function(res){
        return res.text();
      }).then(function(data){
        ele.innerHTML = new easyText(data).parse();
        return null;
      })['catch'](function(err){
        if (onError) {
          return onError(err);
        } else {
          return "fetch error";
        }
      });
      return this;
    };
    easyTextParser.prototype.fromText = function(text){
      this.ele.innerHTML = new easyText(text).parse();
      return this;
    };
    return easyTextParser;
  }());
  out$.easyTextUtil = easyTextUtil = (function(){
    easyTextUtil.displayName = 'easyTextUtil';
    var prototype = easyTextUtil.prototype, constructor = easyTextUtil;
    function easyTextUtil(data){
      this.data = data;
    }
    easyTextUtil.prototype.rand = function(max){
      return Math.floor(Math.random() * max);
    };
    easyTextUtil.prototype.getContent = function(f, t){
      f == null && (f = "(");
      t == null && (t = ")");
      return this.data.slice(this.data.lastIndexOf(f) + 1, this.data.lastIndexOf(t));
    };
    return easyTextUtil;
  }());
  if (module) {
    module.exports = {
      easyText: easyText,
      easyTextParser: easyTextParser,
      easyTextUtil: easyTextUtil
    };
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
  function deepEq$(x, y, type){
    var toString = {}.toString, hasOwnProperty = {}.hasOwnProperty,
        has = function (obj, key) { return hasOwnProperty.call(obj, key); };
    var first = true;
    return eq(x, y, []);
    function eq(a, b, stack) {
      var className, length, size, result, alength, blength, r, key, ref, sizeB;
      if (a == null || b == null) { return a === b; }
      if (a.__placeholder__ || b.__placeholder__) { return true; }
      if (a === b) { return a !== 0 || 1 / a == 1 / b; }
      className = toString.call(a);
      if (toString.call(b) != className) { return false; }
      switch (className) {
        case '[object String]': return a == String(b);
        case '[object Number]':
          return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
        case '[object Date]':
        case '[object Boolean]':
          return +a == +b;
        case '[object RegExp]':
          return a.source == b.source &&
                 a.global == b.global &&
                 a.multiline == b.multiline &&
                 a.ignoreCase == b.ignoreCase;
      }
      if (typeof a != 'object' || typeof b != 'object') { return false; }
      length = stack.length;
      while (length--) { if (stack[length] == a) { return true; } }
      stack.push(a);
      size = 0;
      result = true;
      if (className == '[object Array]') {
        alength = a.length;
        blength = b.length;
        if (first) {
          switch (type) {
          case '===': result = alength === blength; break;
          case '<==': result = alength <= blength; break;
          case '<<=': result = alength < blength; break;
          }
          size = alength;
          first = false;
        } else {
          result = alength === blength;
          size = alength;
        }
        if (result) {
          while (size--) {
            if (!(result = size in a == size in b && eq(a[size], b[size], stack))){ break; }
          }
        }
      } else {
        if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) {
          return false;
        }
        for (key in a) {
          if (has(a, key)) {
            size++;
            if (!(result = has(b, key) && eq(a[key], b[key], stack))) { break; }
          }
        }
        if (result) {
          sizeB = 0;
          for (key in b) {
            if (has(b, key)) { ++sizeB; }
          }
          if (first) {
            if (type === '<<=') {
              result = size < sizeB;
            } else if (type === '<==') {
              result = size <= sizeB
            } else {
              result = size === sizeB;
            }
          } else {
            first = false;
            result = size === sizeB;
          }
        }
      }
      stack.pop();
      return result;
    }
  }
}).call(this);
